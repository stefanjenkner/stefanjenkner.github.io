<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>A developer's notebook</title><link href="/" rel="alternate"/><link href="/feeds/all.atom.xml" rel="self"/><id>/</id><updated>2024-03-30T00:00:00+01:00</updated><subtitle>A developer's notebook</subtitle><entry><title>Setup Pimoroni OnOff SHIM using Device Tree Overlays</title><link href="/2024-03-30-pimoroni-onoff-shim-dtoverlay.html" rel="alternate"/><published>2024-03-30T00:00:00+01:00</published><updated>2024-03-30T00:00:00+01:00</updated><author><name>Stefan Jenkner</name></author><id>tag:None,2024-03-30:/2024-03-30-pimoroni-onoff-shim-dtoverlay.html</id><summary type="html">&lt;p&gt;The OnOff SHIM by Pimoroni is a convenient power switch for the Raspberry Pi. The official guide suggests to install a daemon that initiates a clean shutdown on button press. A much simpler solution is to use device tree overlays and avoid 3rd-party tools.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="https://shop.pimoroni.com/products/onoff-shim"&gt;OnOff SHIM by Pimoroni&lt;/a&gt; is a convenient power switch for the Raspberry Pi.
The official guide suggests to install a daemon that initiates a clean shutdown on button press.
A much simpler solution is to use device tree overlays and avoid 3rd-party tools.
Furthermore, the "old" daemon solution does no longer work on Debian Bookworm based distributions and is a using sysv-based init script.&lt;/p&gt;
&lt;p&gt;Given the &lt;a href="https://pinout.xyz/pinout/onoff_shim"&gt;pin-out of the shim&lt;/a&gt;, the solution is to watch PIN 17 and initiates a clean shutdown on press button (pulled low). And just before the Pi shuts down, PIN 4 gets pulled low to cut the power. Enabling is as easy as adding this to &lt;code&gt;/boot/firmware/config.txt&lt;/code&gt; and reboot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;dtoverlay=gpio-shutdown,gpio_pin=17,active_low=1,gpio_pull=up
dtoverlay=gpio-poweroff,gpiopin=4,active_low=1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please check &lt;a href="https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README"&gt;https://github.com/raspberrypi/firmware/blob/master/boot/overlays/README&lt;/a&gt; for further details.
This solution works on Raspberry Pi OS 12 (Debian Bookworm based) and a Raspberry Pi Zero or later.&lt;/p&gt;</content><category term="Hardware"/><category term="raspberrypi"/><category term="shim"/><category term="onoff"/><category term="bookworm"/></entry><entry><title>Enable hardware watchdog on Raspberry Pi-powered Volumio audio player</title><link href="/2024-03-28-enable-hardware-watchdog-on-raspberry-pi-powered-volumio-3.html" rel="alternate"/><published>2024-03-28T00:00:00+01:00</published><updated>2024-03-29T00:00:00+01:00</updated><author><name>Stefan Jenkner</name></author><id>tag:None,2024-03-28:/2024-03-28-enable-hardware-watchdog-on-raspberry-pi-powered-volumio-3.html</id><summary type="html">&lt;p&gt;The Raspberry Pi features a built-in hardware watchdog timer that automatically resets the system if it becomes unresponsive or freezes. This can be handy when used as an audio player like Volumio - especially if the hardware is not easy to access.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Raspberry Pi features a built-in hardware watchdog timer that automatically resets the system if it becomes unresponsive or freezes.
If enabled, it expects the OS to reset the hardware watchdog every 15 seconds. Otherwise the hardware watchdog initiates a system reboot.
This can be handy when used as an audio player like &lt;a href="https://volumio.com"&gt;Volumio&lt;/a&gt; especially if the hardware is not easy to access.&lt;/p&gt;
&lt;p&gt;Given that &lt;a href="http://0pointer.de/blog/projects/watchdog.html"&gt;systemd provides support for hardware watchdogs&lt;/a&gt;,
there is no need to install userspace tools for basic hardware reset functionality.
The activation requires temporary &lt;a href="https://developers.volumio.com/SSH%20Connection#how-to-enable-ssh"&gt;SSH access&lt;/a&gt; in Volumio.
After successful login, the Device Tree parameter for watchdog is ready for configuration:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;echo &amp;#39;dtparam=watchdog=on&amp;#39; |sudo tee -a /boot/userconfig.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After reboot, the next step is to comment out and change &lt;code&gt;RuntimeWatchdogSec&lt;/code&gt; and &lt;code&gt;ShutdownWatchdogSec&lt;/code&gt; in &lt;code&gt;/etc/systemd/system.conf&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;sudo vi /etc/systemd/system.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;RuntimeWatchdogSec=14
ShutdownWatchdogSec=2min
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;RuntimeWatchdogSec=14&lt;/code&gt; - controls the keep-alive ping interval but systemd pings the hardware at half the specified interval (every 7 seconds)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ShutdownWatchdogSec=2min&lt;/code&gt; - controls the watchdog interval to use during reboots&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The changes can applied via &lt;code&gt;sudo systemctl daemon-reload&lt;/code&gt; (or a reboot) and tested via
the classic &lt;a href="https://en.wikipedia.org/wiki/Fork_bomb"&gt;fork bomb&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;:&lt;span class="o"&gt;(){&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;:&lt;span class="p"&gt;|&lt;/span&gt;:&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;}&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once executed, the system will become unresponsive so the watchdog initiates a reboot.&lt;/p&gt;</content><category term="Audio"/><category term="volumio"/><category term="raspberrypi"/><category term="watchdog"/></entry></feed>